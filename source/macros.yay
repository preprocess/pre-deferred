<?php

$(macro :recursion) {
    $(chain(
        defer,
        between(
            token("{"), layer() as body, token("}")
        ),
        optional(token(";")),
        _() as scope,
        _() as simple
    ))
} >> function($ast) {
    $bound = false;
    $scope = new \Yay\Ast("scope");

    $pushed = [];

    foreach ($ast->{"body"} as $token) {
        $name = $token->value();

        if (!$token->is(T_VARIABLE)) {
            continue;
        }

        if (isset($pushed[$name])) {
            continue;
        }

        if (substr($name, 1) === "this") {
            continue;
        }

        $scope->push(new \Yay\Ast("var", $token));
        $pushed[$name] = true;
        $bound = true;
    }

    if ($bound) {
      $ast->append($scope);
    } else {
      $simple = new \Yay\Ast("simple");
      $simple->push(new \Yay\Ast());

      $ast->append($simple);
    }
} >> {
    $$(collapse($$(trim(
        $(scope ? {
            $deferred = new \Pre\Deferred\Deferred([$(scope ... (, ) {$$(trim($(var) = $(var) ?? null))}), "fn" => function () use ($(scope ... (, ) {&$(var)})) {
                $$(trim($(body)))
            }]["fn"]);
        })

        $(simple ? {
            $deferred = new \Pre\Deferred\Deferred(function () {
                $$(trim($(body)))
            });
        })
    ))))
}

$(macro :recursion) {
    $(chain(
        defer,
        ns() as function,
        between(
            token("("), layer() as parameters, token(")")
        ),
        token(";")
    ))
} >> {
    $deferred = $$(unsafe(new \Pre\Deferred\Deferred((function (...$parameters) {
        return function () use ($parameters) {
            $(function)(...$parameters);
        };
    })($(parameters)))));
}
